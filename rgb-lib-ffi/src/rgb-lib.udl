namespace rgb_lib {
  Keys generate_keys(BitcoinNetwork bitcoin_network);

  [Throws=RgbLibError]
  Keys restore_keys(BitcoinNetwork bitcoin_network, string mnemonic);
};

[Error]
enum RgbLibError {
  "AllocationsAlreadyAvailable",
  "AssetNotFound",
  "BatchTransferNotFound",
  "BlindedUTXOAlreadyUsed",
  "CannotChangeOnline",
  "CannotDeleteTransfer",
  "CannotFailTransfer",
  "Electrum",
  "FailedBdkSync",
  "FailedBroadcast",
  "FailedIssuance",
  "IO",
  "Inconsistency",
  "InexistentDataDir",
  "InsufficientAllocationSlots",
  "InsufficientBitcoins",
  "InsufficientSpendableAssets",
  "InsufficientTotalAssets",
  "Internal",
  "InvalidAddress",
  "InvalidBitcoinKeys",
  "InvalidBlindedUTXO",
  "InvalidDescription",
  "InvalidElectrum",
  "InvalidFilePath",
  "InvalidInvoice",
  "InvalidMnemonic",
  "InvalidName",
  "InvalidOnline",
  "InvalidParentId",
  "InvalidPsbt",
  "InvalidPubkey",
  "InvalidTicker",
  "NoIssuanceAmounts",
  "Proxy",
  "TransferNotFound",
  "UnknownRgbSchema",
  "UnsupportedInvoice",
  "WatchOnly",
};

enum AssetType {
  "Rgb20",
  "Rgb121",
};

dictionary AssetRgb20 {
  string asset_id;
  string ticker;
  string name;
  u8 precision;
  Balance balance;
};

dictionary Media {
  string file_path;
  string mime;
};

dictionary AssetRgb121 {
  string asset_id;
  string name;
  string? description;
  u8 precision;
  Balance balance;
  sequence<Media> data_paths;
  string? parent_id;
};

dictionary Assets {
  sequence<AssetRgb20>? rgb20;
  sequence<AssetRgb121>? rgb121;
};

dictionary Balance {
  u64 settled;
  u64 future;
  u64 spendable;
};

enum BitcoinNetwork {
  "Mainnet",
  "Testnet",
  "Signet",
  "Regtest",
};

dictionary BlindData {
  string invoice;
  string blinded_utxo;
  u64 blinding_secret;
  i64? expiration_timestamp;
};

interface BlindedUTXO {
  [Throws=RgbLibError]
  constructor(string blinded_utxo);
};

enum DatabaseType {
  "Sqlite",
};

interface Invoice {
  [Throws=RgbLibError]
  constructor(string bech32_invoice);

  [Name=from_invoice_data, Throws=RgbLibError]
  constructor(InvoiceData invoice_data);

  InvoiceData invoice_data();

  string bech32_invoice();
};

dictionary InvoiceData {
  string blinded_utxo;
  string? asset_id;
  u64? amount;
  i64? expiration_timestamp;
};

dictionary Keys {
  string mnemonic;
  string xpub;
  string xpub_fingerprint;
};

dictionary Online {
  u64 id;
  string electrum_url;
  string proxy_url;
};

dictionary Outpoint {
  string txid;
  u32 vout;
};

dictionary Recipient {
  string blinded_utxo;
  u64 amount;
};

dictionary RgbAllocation {
  string? asset_id;
  u64 amount;
  boolean settled;
};

enum TransferStatus {
  "WaitingCounterparty",
  "WaitingConfirmations",
  "Settled",
  "Failed",
};

dictionary Transfer {
  i64 idx;
  i64 created_at;
  i64 updated_at;
  TransferStatus status;
  u64 amount;
  boolean incoming;
  string? txid;
  string? blinded_utxo;
  Outpoint? unblinded_utxo;
  Outpoint? change_utxo;
  u64? blinding_secret;
  i64? expiration;
};

dictionary Unspent {
  Utxo utxo;
  sequence<RgbAllocation> rgb_allocations;
};

dictionary Utxo {
  Outpoint outpoint;
  u64 btc_amount;
  boolean colorable;
};

dictionary WalletData {
  string data_dir;
  BitcoinNetwork bitcoin_network;
  DatabaseType database_type;
  string pubkey;
  string? mnemonic;
};

interface Wallet {
  [Throws=RgbLibError]
  constructor(WalletData wallet_data);

  [Throws=RgbLibError]
  BlindData blind(string? asset_id, u64? amount, u32? duration_seconds);

  [Throws=RgbLibError]
  u8 create_utxos(Online online, boolean up_to, u8? num, u32? size);

  [Throws=RgbLibError]
  string create_utxos_begin(Online online, boolean up_to, u8? num, u32? size);

  [Throws=RgbLibError]
  u8 create_utxos_end(Online online, string signed_psbt);

  [Throws=RgbLibError]
  void delete_transfers(string? blinded_utxo, string? txid);

  [Throws=RgbLibError]
  string drain_to(Online online, string address, boolean destroy_assets);

  [Throws=RgbLibError]
  string drain_to_begin(Online online, string address, boolean destroy_assets);

  [Throws=RgbLibError]
  string drain_to_end(Online online, string signed_psbt);

  [Throws=RgbLibError]
  void fail_transfers(Online online, string? blinded_utxo, string? txid);

  string get_address();

  [Throws=RgbLibError]
  Balance get_asset_balance(string asset_id);

  [Throws=RgbLibError]
  Online go_online(boolean skip_consistency_check, string electrum_url, string proxy_url);

  [Throws=RgbLibError]
  AssetRgb20 issue_asset_rgb20(
    Online online, string ticker, string name, u8 precision,
    sequence<u64> amounts);

  [Throws=RgbLibError]
  AssetRgb121 issue_asset_rgb121(
    Online online, string name, string? description, u8 precision,
    sequence<u64> amounts, string? parent_id, string? file_path);

  [Throws=RgbLibError]
  Assets list_assets(sequence<AssetType> filter_asset_types);

  [Throws=RgbLibError]
  sequence<Transfer> list_transfers(string asset_id);

  [Throws=RgbLibError]
  sequence<Unspent> list_unspents(boolean settled_only);

  [Throws=RgbLibError]
  void refresh(Online online, string? asset_id);

  [Throws=RgbLibError]
  string send(
    Online online, record<DOMString, sequence<Recipient>> recipient_map,
    boolean donation);

  [Throws=RgbLibError]
  string send_begin(
    Online online, record<DOMString, sequence<Recipient>> recipient_map,
    boolean donation);

  [Throws=RgbLibError]
  string send_end(Online online, string signed_psbt);
};
