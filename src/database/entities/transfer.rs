//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

use crate::wallet::TransferStatus;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "transfer"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub idx: i64,
    pub created_at: i64,
    pub updated_at: i64,
    pub status: TransferStatus,
    pub user_driven: bool,
    pub asset_id: Option<String>,
    pub txid: Option<String>,
    pub blinded_utxo: Option<String>,
    pub blinding_secret: Option<String>,
    pub expiration: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Idx,
    CreatedAt,
    UpdatedAt,
    Status,
    UserDriven,
    AssetId,
    Txid,
    BlindedUtxo,
    BlindingSecret,
    Expiration,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Idx,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Asset,
    Coloring,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Idx => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::BigInteger.def(),
            Self::UpdatedAt => ColumnType::BigInteger.def(),
            Self::Status => ColumnType::SmallInteger.def(),
            Self::UserDriven => ColumnType::Boolean.def(),
            Self::AssetId => ColumnType::String(None).def().null(),
            Self::Txid => ColumnType::String(None).def().null(),
            Self::BlindedUtxo => ColumnType::String(None).def().null(),
            Self::BlindingSecret => ColumnType::String(None).def().null(),
            Self::Expiration => ColumnType::BigInteger.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Asset => Entity::belongs_to(super::asset::Entity)
                .from(Column::AssetId)
                .to(super::asset::Column::AssetId)
                .into(),
            Self::Coloring => Entity::has_many(super::coloring::Entity).into(),
        }
    }
}

impl Related<super::asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Asset.def()
    }
}

impl Related<super::coloring::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Coloring.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
