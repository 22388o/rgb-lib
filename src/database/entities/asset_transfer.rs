//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "asset_transfer"
    }
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub idx: i64,
    pub user_driven: bool,
    pub batch_transfer_idx: i64,
    pub asset_rgb20_id: Option<String>,
    pub asset_rgb21_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Idx,
    UserDriven,
    BatchTransferIdx,
    AssetRgb20Id,
    AssetRgb21Id,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Idx,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AssetRgb20,
    AssetRgb21,
    BatchTransfer,
    Transfer,
    Coloring,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Idx => ColumnType::BigInteger.def(),
            Self::UserDriven => ColumnType::Boolean.def(),
            Self::BatchTransferIdx => ColumnType::BigInteger.def(),
            Self::AssetRgb20Id => ColumnType::String(None).def().null(),
            Self::AssetRgb21Id => ColumnType::String(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::AssetRgb20 => Entity::belongs_to(super::asset_rgb20::Entity)
                .from(Column::AssetRgb20Id)
                .to(super::asset_rgb20::Column::AssetId)
                .into(),
            Self::AssetRgb21 => Entity::belongs_to(super::asset_rgb21::Entity)
                .from(Column::AssetRgb21Id)
                .to(super::asset_rgb21::Column::AssetId)
                .into(),
            Self::BatchTransfer => Entity::belongs_to(super::batch_transfer::Entity)
                .from(Column::BatchTransferIdx)
                .to(super::batch_transfer::Column::Idx)
                .into(),
            Self::Transfer => Entity::has_many(super::transfer::Entity).into(),
            Self::Coloring => Entity::has_many(super::coloring::Entity).into(),
        }
    }
}

impl Related<super::asset_rgb20::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssetRgb20.def()
    }
}

impl Related<super::asset_rgb21::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssetRgb21.def()
    }
}

impl Related<super::batch_transfer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BatchTransfer.def()
    }
}

impl Related<super::transfer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transfer.def()
    }
}

impl Related<super::coloring::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Coloring.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
